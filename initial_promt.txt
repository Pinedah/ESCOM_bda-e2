Eres un agente de codificaci√≥n responsable de resolver y entregar un proyecto completo a partir de un examen de Bases de Datos Avanzadas del Instituto Polit√©cnico Nacional, Escuela Superior de C√≥mputo (IPN - ESCOM). El objetivo es transformar un modelo Entidad-Relaci√≥n (ER) sobre pel√≠culas a diferentes modelos de datos NoSQL, semiestructurados y multidimensionales, adem√°s de ejecutar consultas espec√≠ficas y contenerizar los servicios con Docker.

üß© üóÇ Estructura Base de la Base de Datos (MySQL)
Esta estructura representa una posible implementaci√≥n inicial en MySQL del modelo ER de pel√≠culas, que debes usar como base para transformarla a los modelos requeridos:

sql
Copy
Edit
CREATE DATABASE cine;
USE cine;

-- Cat√°logos
CREATE TABLE estado_civil (
  id_estado INT PRIMARY KEY AUTO_INCREMENT,
  descripcion VARCHAR(50) NOT NULL
);

CREATE TABLE tipo_actuacion (
  id_tipo INT PRIMARY KEY AUTO_INCREMENT,
  descripcion VARCHAR(50) NOT NULL
);

CREATE TABLE tipo_certamen (
  id_tipo INT PRIMARY KEY AUTO_INCREMENT,
  descripcion VARCHAR(50) NOT NULL
);

-- Personas
CREATE TABLE persona (
  id_persona INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100) NOT NULL,
  fecha_nacimiento DATE NOT NULL,
  estado_civil_id INT,
  telefono VARCHAR(20),
  FOREIGN KEY (estado_civil_id) REFERENCES estado_civil(id_estado)
);

-- Actores (especializaci√≥n de persona)
CREATE TABLE actor (
  id_actor INT PRIMARY KEY,
  salario DECIMAL(12,2) CHECK (salario BETWEEN 600000 AND 4900000),
  FOREIGN KEY (id_actor) REFERENCES persona(id_persona)
);

-- Directores
CREATE TABLE director (
  id_director INT PRIMARY KEY,
  FOREIGN KEY (id_director) REFERENCES persona(id_persona)
);

-- Productores
CREATE TABLE productor (
  id_productor INT PRIMARY KEY,
  aportacion_economica DECIMAL(12,2) CHECK (aportacion_economica > 0),
  FOREIGN KEY (id_productor) REFERENCES persona(id_persona)
);

-- Pel√≠culas
CREATE TABLE pelicula (
  id_pelicula INT PRIMARY KEY AUTO_INCREMENT,
  titulo VARCHAR(150) NOT NULL,
  resumen TEXT,
  fecha_estreno DATE,
  ranking DECIMAL(2,1) CHECK (ranking BETWEEN 1.0 AND 5.0),
  id_director INT,
  FOREIGN KEY (id_director) REFERENCES director(id_director)
);

-- Relaci√≥n de actuaci√≥n en pel√≠culas
CREATE TABLE actuacion (
  id_actor INT,
  id_pelicula INT,
  tipo_actuacion_id INT,
  PRIMARY KEY (id_actor, id_pelicula),
  FOREIGN KEY (id_actor) REFERENCES actor(id_actor),
  FOREIGN KEY (id_pelicula) REFERENCES pelicula(id_pelicula),
  FOREIGN KEY (tipo_actuacion_id) REFERENCES tipo_actuacion(id_tipo)
);

-- Relaci√≥n de producci√≥n
CREATE TABLE produccion (
  id_productor INT,
  id_pelicula INT,
  PRIMARY KEY (id_productor, id_pelicula),
  FOREIGN KEY (id_productor) REFERENCES productor(id_productor),
  FOREIGN KEY (id_pelicula) REFERENCES pelicula(id_pelicula)
);

-- Premios
CREATE TABLE premio (
  id_premio INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100) NOT NULL,
  id_pelicula INT,
  id_certamen INT,
  FOREIGN KEY (id_pelicula) REFERENCES pelicula(id_pelicula),
  FOREIGN KEY (id_certamen) REFERENCES tipo_certamen(id_tipo)
);

-- Cr√≠ticas
CREATE TABLE critica (
  id_critica INT PRIMARY KEY AUTO_INCREMENT,
  id_pelicula INT,
  medio VARCHAR(100),
  autor VARCHAR(100),
  fecha DATE,
  contenido TEXT,
  FOREIGN KEY (id_pelicula) REFERENCES pelicula(id_pelicula)
);
Este modelo incluye cat√°logos, especializaci√≥n de personas, relaciones actor-pel√≠cula y productor-pel√≠cula, premios y cr√≠ticas. El agente debe tomar este esquema como referencia para poblar, consultar y transformar los datos a todos los modelos solicitados.

üì¶ Requisitos Generales
Contenerizaci√≥n con Docker:

Todos los sistemas que usen bases de datos (PostgreSQL, MongoDB, Neo4j) deben ejecutarse en contenedores Docker.

Crear un archivo docker-compose.yml que orqueste todos los servicios.

Asegurarse de que cada contenedor tenga sus propios vol√∫menes persistentes.

Poblado de datos:

Cada entidad de cat√°logo (como estado civil, tipo de actuaci√≥n) debe tener al menos 50 registros.

Entidades transaccionales (pel√≠cula, actor, productor) deben tener al menos 100 registros consistentes y realistas.

Formato de datos y validaciones:

Aportaciones econ√≥micas y salarios: valores num√©ricos positivos con hasta dos decimales.

Salarios de actores entre $600,000.00 y $4,900,000.00.

Estados civiles v√°lidos: Soltero, Casado, Divorciado, Viudo, Uni√≥n libre.

Tipos de certamen: Nacional, Internacional.

Resumen de pel√≠cula: entre 250 y 450 palabras.

Fechas en formato YYYY-MM-DD.

Ranking: valor entre 1.0 y 5.0, con al menos un decimal.

Tipo de actuaci√≥n: Protagonista, Secundario, De reparto, Extra.

üõ†Ô∏è Tareas por Modelo
1. ‚≠ê Modelo Multidimensional (Estrella) ‚Äì PostgreSQL
Dise√±a una tabla de hechos y sus respectivas dimensiones.

Incluye el diagrama en imagen legible.

Usa tipos de datos SQL apropiados (especificar).

Implementa las consultas usando MDX (o SQL avanzado si no se cuenta con un servidor OLAP).

Implementa el modelo completo en PostgreSQL y contener√≠zalo.

2. üß± Modelo Relacional-Objetual ‚Äì PostgreSQL
Transforma el modelo ER usando:

Tipos compuestos (CREATE TYPE)

Herencia de tablas

Funciones en PL/pgSQL

Dominios personalizados para validaciones.

Incluye un diagrama de clases o esquema.

Incluye:

C√≥digo de creaci√≥n de tipos y tablas.

Inserci√≥n de datos.

Resoluci√≥n de las consultas.

Usar PostgreSQL en contenedor Docker.

3. üóÇÔ∏è Modelo Semiestructurado (XML) ‚Äì PostgreSQL
Modelar los datos en formato XML.

Justificar el uso de cada caracter√≠stica de XML.

Incluir:

Documento XML Schema (XSD).

C√≥digo SQL para crear tablas, insertar documentos XML y ejecutar consultas con XPath y SQL/XML.

Usar PostgreSQL con soporte XML en contenedor Docker.

4. üßæ Modelo Semiestructurado (JSON) ‚Äì MongoDB
Modelar los datos como documentos JSON.

Incluir:

Documento JSON Schema del modelo.

C√≥digo BSON (Mongo Shell) para:

Crear colecciones.

Poblar datos.

Ejecutar las consultas de negocio.

Usar MongoDB en contenedor Docker.

5. üß† Modelo Orientado a Grafos ‚Äì Neo4j
Modelar las entidades y relaciones como nodos y aristas.

Incluir:

Imagen del grafo (ejemplar representativo).

C√≥digo en Cypher para creaci√≥n de nodos, relaciones y consultas.

Usar Neo4j en contenedor Docker.

üìä Consultas de Negocio a Implementar en Todos los Modelos
A. Total de salarios pagados a los actores de "Cinema Paradiso", dirigida por "Giuseppe Tornatore".

B. Premios recibidos por "Cinema Paradiso", con ranking (descendente), nombre del premio y lugar del certamen.

C. Total de aportes econ√≥micos del productor "Franco Cristaldi".

D. Cr√≠ticas de "Cinema Paradiso" entre el 15 y el 30 de agosto de 1990, incluyendo medio, fecha y autor, ordenadas por fecha descendente.

E. Personas involucradas en la filmaci√≥n de "Cinema Paradiso", mostrando nombre, rol (actor, director, productor), edad actual, estado civil y tel√©fono.

üßæ Entregables Finales
Carpeta con cada modelo en su subcarpeta correspondiente:

bash
Copy
Edit
/modelo_multidimensional/
/modelo_objetual/
/modelo_xml/
/modelo_json/
/modelo_grafo/
Archivo docker-compose.yml funcional que contenga servicios para PostgreSQL, MongoDB y Neo4j.

Carpeta /scripts/ con todos los scripts de creaci√≥n, inserci√≥n y consulta por modelo.